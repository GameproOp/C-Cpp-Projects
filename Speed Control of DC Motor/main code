#include "main.h" 
#include "cmsis_os.h" 
#include "stm32g4xx_hal.h" 
UART_HandleTypeDef huart1; 
TIM_HandleTypeDef htim2; 
// PWM and direction control pins 
#define MOTOR_DIR_FWD_PIN GPIO_PIN_10 
#define MOTOR_DIR_REV_PIN GPIO_PIN_5 
#define MOTOR_DIR_PORT GPIOA 
void SystemClock_Config(void); 
static void MX_GPIO_Init(void); 
static void MX_USART1_UART_Init(void); 
static void MX_TIM2_Init(void); 
void StartDefaultTask(void *argument); 
// Task function declarations 
void vSerialTask(void *pvParameters); 
void vPWMControlTask(void *pvParameters); 
char rxBuffer[1]; // Buffer to store received characters 
uint8_t motorSpeed = 0; // Duty cycle for PWM (0-100%) 
char motorDirection = 'F'; // Default direction (Forward) 
int main(void) { 
    HAL_Init(); 
    SystemClock_Config(); 
    MX_GPIO_Init(); 
    MX_USART1_UART_Init(); 
    MX_TIM2_Init(); 
 
    // Start the PWM 
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); 
 
    // Start FreeRTOS tasks 
    osKernelInitialize(); 
    osThreadNew(vSerialTask, NULL, NULL);    // UART task 
    osThreadNew(vPWMControlTask, NULL, NULL); // PWM task 
    osKernelStart(); 
 
    while (1) {} 
} 
 
// Task to handle UART serial input 
void vSerialTask(void *pvParameters) { 
    while (1) { 
        HAL_UART_Receive_IT(&huart1, (uint8_t *)rxBuffer, 1);  // Receive 1 character 
        char command = rxBuffer[0]; 
 
        switch (command) { 
            case 'F': 
                motorDirection = 'F'; 
                HAL_GPIO_WritePin(MOTOR_DIR_PORT, MOTOR_DIR_FWD_PIN, GPIO_PIN_SET); 
                HAL_GPIO_WritePin(MOTOR_DIR_PORT, MOTOR_DIR_REV_PIN, GPIO_PIN_RESET); 
                break; 
            case 'R': 
                motorDirection = 'R'; 
                HAL_GPIO_WritePin(MOTOR_DIR_PORT, MOTOR_DIR_FWD_PIN, 
GPIO_PIN_RESET); 
                HAL_GPIO_WritePin(MOTOR_DIR_PORT, MOTOR_DIR_REV_PIN, GPIO_PIN_SET); 
                break; 
            case 'S': 
                motorSpeed = 50; // Set default speed to 50% when starting 
                break; 
            case 'P': 
                motorSpeed = 0; // Stop motor 
                break; 
            case '1' ... '9': 
                motorSpeed = (command - '0') * 10; // Set PWM duty cycle from 10% to 90% 
                break; 
            default: 
                break; 
        } 
        osDelay(10); 
    } 
} 
 
// Task to control PWM based on received commands 
void vPWMControlTask(void *pvParameters) { 
    while (1) { 
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, motorSpeed * 10); // Update 
PWM duty cycle 
        osDelay(10); 
    } 
} 
 
// TIM2 Initialization function for PWM generation 
static void MX_TIM2_Init(void) { 
    TIM_OC_InitTypeDef sConfigOC = {0}; 
 
    htim2.Instance = TIM2; 
    htim2.Init.Prescaler = 79;  // Timer clock = 80 MHz, set prescaler to get 1 MHz counter 
clock 
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP; 
    htim2.Init.Period = 1000 - 1; // 1 KHz PWM frequency 
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1; 
    HAL_TIM_PWM_Init(&htim2); 
 
    sConfigOC.OCMode = TIM_OCMODE_PWM1; 
    sConfigOC.Pulse = 0; // Start with 0% duty cycle 
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH; 
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE; 
    HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2); 
} 
 
// UART initialization for serial communication 
static void MX_USART1_UART_Init(void) { 
    huart1.Instance = USART1; 
    huart1.Init.BaudRate = 115200; 
    huart1.Init.WordLength = UART_WORDLENGTH_8B; 
    huart1.Init.StopBits = UART_STOPBITS_1; 
    huart1.Init.Parity = UART_PARITY_NONE; 
    huart1.Init.Mode = UART_MODE_TX_RX; 
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE; 
    huart1.Init.OverSampling = UART_OVERSAMPLING_16; 
    HAL_UART_Init(&huart1); 
} 
 
// GPIO Initialization function for motor control pins 
static void MX_GPIO_Init(void) { 
    GPIO_InitTypeDef GPIO_InitStruct = {0}; 
 
    // GPIO Ports Clock Enable 
    __HAL_RCC_GPIOA_CLK_ENABLE(); 
    __HAL_RCC_GPIOB_CLK_ENABLE(); 
 
    // Configure GPIO pins for motor direction control 
    GPIO_InitStruct.Pin = MOTOR_DIR_FWD_PIN | MOTOR_DIR_REV_PIN; 
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; 
    GPIO_InitStruct.Pull = GPIO_NOPULL; 
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW; 
    HAL_GPIO_Init(MOTOR_DIR_PORT, &GPIO_InitStruct); 
}
