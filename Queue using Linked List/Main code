#include <stdio.h>
#include <stdlib.h>
// Node structure
struct Node {
 int data;
 struct Node* next;
};
// Function to create a new node
struct Node* createNode(int data) {
 struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
 newNode->data = data;
 newNode->next = NULL;
 return newNode;
}
// Function to enqueue an element
void enqueue(struct Node** front, struct Node** rear, int data) {
 struct Node* newNode = createNode(data);
 if (*rear == NULL) {
 *front = *rear = newNode;
 return;
 }
 (*rear)->next = newNode;
 *rear = newNode;
}
// Function to dequeue an element
int dequeue(struct Node** front, struct Node** rear) {
 if (*front == NULL) {
 printf("Queue is empty.\n");
 return -1;
 }
 struct Node* temp = *front;
 int data = temp->data;
 *front = (*front)->next;
 if (*front == NULL)
 *rear = NULL;
 free(temp);
 return data;
}
// Function to display the queue
void displayQueue(struct Node* front) {
 struct Node* temp = front;
 while (temp != NULL) {
 printf("%d -> ", temp->data);
 temp = temp->next;
 }
 printf("NULL\n");
}
// Main function
int main() {
 struct Node* front = NULL;
 struct Node* rear = NULL;
 enqueue(&front, &rear, 10);
 enqueue(&front, &rear, 20);
 enqueue(&front, &rear, 30);
 printf("Queue after enqueuing 3 elements: ");
 displayQueue(front);
 printf("Dequeued element: %d\n", dequeue(&front, &rear));
 printf("Queue after dequeue: ");
 displayQueue(front);
 return 0;
}
